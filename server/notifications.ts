// Telegram Bot API integration for notifications
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

interface ContactFormData {
  name: string;
  email: string;
  phone: string;
  message: string;
}

export async function sendTelegramNotification(formData: ContactFormData): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    throw new Error("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
  }

  try {
    const message = `
üö¥‚Äç‚ôÇÔ∏è *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${formData.name}
üìß *Email:* ${formData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${formData.message}

‚è∞ *–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Warsaw' })} (Warsaw)

üîó *–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º:*
‚Ä¢ Email: ${formData.email}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
    `;

    const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${result.description || 'Unknown error'}`);
    }

    console.log('Telegram notification sent successfully');
    return true;
  } catch (error) {
    console.error('Error sending Telegram notification:', error);
    throw error;
  }
}

// Fallback function for when Telegram is not configured
export async function logContactForm(formData: ContactFormData): Promise<boolean> {
  console.log('=== –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ===');
  console.log(`–ò–º—è: ${formData.name}`);
  console.log(`Email: ${formData.email}`);
  console.log(`–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}`);
  console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}`);
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Warsaw' })}`);
  console.log('====================================');
  return true;
}

export async function sendContactNotification(formData: ContactFormData): Promise<boolean> {
  try {
    // Try Telegram first
    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      return await sendTelegramNotification(formData);
    } else {
      // Fallback to console logging
      console.warn('Telegram not configured, logging to console');
      return await logContactForm(formData);
    }
  } catch (error) {
    console.error('Error sending notification:', error);
    
    // Fallback to console logging if Telegram fails
    console.warn('Fallback to console logging due to error');
    return await logContactForm(formData);
  }
}