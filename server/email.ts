// Telegram Bot API integration for notifications
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

interface ContactFormData {
  name: string;
  email: string;
  phone: string;
  message: string;
}

const COMPANY_EMAIL = 'info@rowerhub.bike'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email –∫–æ–º–ø–∞–Ω–∏–∏
const COMPANY_PHONE = '800922508'; // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏

export async function sendContactEmail(formData: ContactFormData): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    throw new Error("SENDGRID_API_KEY is required for sending emails");
  }

  try {
    const emailToCompany = {
      to: COMPANY_EMAIL,
      from: COMPANY_EMAIL, // SendGrid —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ - ${formData.name}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #f97316;">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞</h2>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:</h3>
            <p><strong>–ò–º—è:</strong> ${formData.name}</p>
            <p><strong>Email:</strong> ${formData.email}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${formData.phone}</p>
          </div>
          
          <div style="background-color: #fff5f5; padding: 20px; border-radius: 8px; border-left: 4px solid #f97316;">
            <h3 style="color: #333; margin-top: 0;">–°–æ–æ–±—â–µ–Ω–∏–µ:</h3>
            <p style="white-space: pre-wrap;">${formData.message}</p>
          </div>
          
          <div style="margin-top: 30px; padding: 15px; background-color: #e5f3ff; border-radius: 8px;">
            <p style="margin: 0; color: #0066cc;">
              <strong>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º:</strong><br>
              üìß Email: <a href="mailto:${formData.email}">${formData.email}</a><br>
              üì± –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:${formData.phone}">${formData.phone}</a>
            </p>
          </div>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
          <p style="color: #666; font-size: 12px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ RowerHub.bike<br>
            –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Warsaw' })} (Warsaw)
          </p>
        </div>
      `,
      text: `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞

–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:
–ò–º—è: ${formData.name}
Email: ${formData.email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}

–°–æ–æ–±—â–µ–Ω–∏–µ:
${formData.message}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º:
Email: ${formData.email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}

–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Warsaw' })} (Warsaw)
      `
    };

    await sgMail.send(emailToCompany);
    console.log('Contact form email sent successfully');
    return true;
  } catch (error) {
    console.error('Error sending contact form email:', error);
    throw error;
  }
}

export async function sendConfirmationEmail(formData: ContactFormData): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    return false; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞
  }

  try {
    const confirmationEmail = {
      to: formData.email,
      from: COMPANY_EMAIL,
      subject: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ - RowerHub.bike',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #f97316;">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!</h2>
          
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${formData.name}!</p>
          
          <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</h3>
            <p><strong>–ò–º—è:</strong> ${formData.name}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${formData.phone}</p>
            <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${formData.message}</p>
          </div>
          
          <div style="background-color: #e5f3ff; padding: 15px; border-radius: 8px;">
            <h3 style="color: #0066cc; margin-top: 0;">–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</h3>
            <p>üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${COMPANY_PHONE}</p>
            <p>üìß Email: ${COMPANY_EMAIL}</p>
            <p>üì± Telegram: @BaitEb1ke</p>
            <p>üìç –ê–¥—Ä–µ—Å: Zygmunta Krasi≈Ñskiego 28, 50-450 Wroc≈Çaw</p>
          </div>
          
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ RowerHub.bike</p>
        </div>
      `,
      text: `
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${formData.name}!

–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:
–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}

–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
–¢–µ–ª–µ—Ñ–æ–Ω: ${COMPANY_PHONE}
Email: ${COMPANY_EMAIL}
Telegram: @BaitEb1ke
–ê–¥—Ä–µ—Å: Zygmunta Krasi≈Ñskiego 28, 50-450 Wroc≈Çaw

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ RowerHub.bike
      `
    };

    await sgMail.send(confirmationEmail);
    console.log('Confirmation email sent successfully');
    return true;
  } catch (error) {
    console.error('Error sending confirmation email:', error);
    return false; // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
  }
}